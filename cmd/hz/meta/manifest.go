/*
 * Copyright 2022 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package meta

import (
	gv "github.com/hashicorp/go-version"
	"gopkg.in/yaml.v3"
	"os"
	"path/filepath"
)

const ManifestFile = ".hz"

type Manifest struct {
	Version    string `yaml:"version"`
	HandlerDir string `yaml:"handlerDir"`
	ModelDir   string `yaml:"modelDir"`
	RouterDir  string `yaml:"routerDir"`
}

var GoVersion *gv.Version

func init() {
	// valid by unit test already, so no need to check error
	GoVersion, _ = gv.NewVersion(Version)
}

func (manifest *Manifest) Validate(dir string) error {
	m, err := loadConfigFile(filepath.Join(dir, ManifestFile))
	if err != nil {
		return err
	}

	*manifest = *m

	_, err = gv.NewVersion(manifest.Version)
	if err != nil {
		return err
	}

	return nil
}

func (manifest Manifest) String() string {
	return `# Code generated by hz. DO NOT EDIT.

version: v` + manifest.Version + "\n" +
		"handlerDir: " + manifest.HandlerDir + "\n" +
		"modelDir: " + manifest.ModelDir + "\n" +
		"routerDir: " + manifest.RouterDir + "\n"
}

func (manifest Manifest) Persist(dir string) error {
	file := filepath.Join(dir, ManifestFile)
	fd, err := os.OpenFile(file, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, os.FileMode(0o644))
	if err != nil {
		return err
	}
	defer fd.Close()
	_, err = fd.WriteString(manifest.String())
	return err
}

// loadConfigFile load config file from path
func loadConfigFile(path string) (*Manifest, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer file.Close() // nolint
	var manifest Manifest
	if cmdErr := yaml.NewDecoder(file).Decode(&manifest); cmdErr != nil {
		return nil, cmdErr
	}
	return &manifest, nil
}
